@page "/traditional-simulator"
@using System.Net.Http
@using System.Net.Http.Json
@using InvestmentSimulator.Client.Models
@inject HttpClient Http

<PageTitle>Traditional Investment Simulator</PageTitle>

<h1>Traditional Investment Simulator</h1>

<div class="card">
    <div class="card-body">
        <EditForm Model="@investmentInput" OnValidSubmit="HandleSubmit" FormName="traditionalSimForm">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="initialAmount" class="form-label">Initial Amount (â‚¬)</label>
                <InputNumber id="initialAmount" class="form-control" @bind-Value="investmentInput.InitialAmount" />
            </div>

            <div class="mb-3">
                <label for="interestRate" class="form-label">Annual Interest Rate (%)</label>
                <InputNumber id="interestRate" class="form-control" @bind-Value="investmentInput.InterestRate" />
            </div>

            <div class="mb-3">
                <label for="timePeriod" class="form-label">Time Period (Months)</label>
                <InputNumber id="timePeriod" class="form-control" @bind-Value="investmentInput.TimePeriod" />
            </div>

            <button type="submit" class="btn btn-primary">Simulate</button>
        </EditForm>
    </div>
</div>

@if (simulationResult != null)
{
    <div class="card mt-4">
        <div class="card-header">
            <h3>Simulation Result</h3>
        </div>
        <div class="card-body">
            <p><strong>Final Value:</strong> @simulationResult.FinalValue.ToString("C")</p>
            <h4>Evolution:</h4>
            <ul class="list-group">
                @foreach (var value in simulationResult.Evolution)
                {
                    <li class="list-group-item">@value.ToString("C")</li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private TraditionalSimulationInput investmentInput = new();
    private TraditionalSimulationResult? simulationResult;

    private async Task HandleSubmit()
    {
        // We'll need a way to get the real UserId later
        var investment = new TraditionalSimulationInput
        {
            InitialAmount = investmentInput.InitialAmount,
            InterestRate = investmentInput.InterestRate,
            TimePeriod = investmentInput.TimePeriod,
            UserId = "dummy-user-id"
        };
        
        var response = await Http.PostAsJsonAsync("/api/simulation/simulate", investment);

        if (response.IsSuccessStatusCode)
        {
            simulationResult = await response.Content.ReadFromJsonAsync<TraditionalSimulationResult>();
        }
        else
        {
            // Handle error
            simulationResult = null;
        }
    }

    
}
